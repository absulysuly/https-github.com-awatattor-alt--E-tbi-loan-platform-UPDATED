--- a/services/geminiService.ts
+++ b/services/riskAssessmentService.ts
@@ -1,114 +1,186 @@
-// FIX: Implemented the geminiService to generate event suggestions and images using the Gemini API, following all provided coding guidelines. This includes initializing the client, using `ai.models.generateContent` with a JSON schema for structured output, and `ai.models.generateImages` for visuals. This resolves the 'not a module' error for this file.
+/**
+ * TBi Bank CSDR Loan Risk Assessment Service
+ * 
+ * Adapts the AI service architecture from event suggestions to loan risk assessment
+ * Provides structured risk scoring with explainability and audit trails
+ */
 import { GoogleGenerativeAI, SchemaType } from "@google/generative-ai";
-import type { City, Category, AISuggestionResponse, LocalizedString } from '../types';
+import type { 
+  LoanApplication, 
+  RiskAssessment, 
+  RiskFactors, 
+  RiskConfiguration,
+  ExplainabilityData 
+} from '../types/loan-types';
 
-// FIX: Initialized the GoogleGenerativeAI client according to guidelines.
+// Initialize GoogleGenerativeAI client with enhanced security for banking
 const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || '');
 
-const getAISuggestions = async (
-  prompt: string,
-  cities: City[],
-  categories: Category[]
-): Promise<AISuggestionResponse> => {
-  
-  // Create a simplified list of cities and categories for the model prompt.
-  const cityList = cities.map(c => `id: "${c.id}", name: "${c.name.en}"`).join('; ');
-  const categoryList = categories.map(c => `id: "${c.id}", name: "${c.name.en}"`).join('; ');
-
-  const systemInstruction = `You are an expert event planner assistant. Based on the user's prompt, you will generate compelling, multilingual event details (title and description in English, Arabic, and Kurdish). You must also select the most appropriate city and category from the provided lists. Your response must be in JSON format matching the specified schema.
-
-  Available cities: ${cityList}
-  Available categories: ${categoryList}`;
-
-  // Define the expected JSON response structure for the model.
+/**
+ * Assess loan application risk using AI-powered analysis
+ * 
+ * @param application - Complete loan application data
+ * @param configuration - Current risk scoring configuration
+ * @returns Comprehensive risk assessment with explainability
+ */
+const assessLoanRisk = async (
+  application: LoanApplication,
+  configuration: RiskConfiguration
+): Promise<RiskAssessment> => {
+  
+  const systemInstruction = `You are an expert financial risk analyst for TBi Bank specializing in CSDR (Credit Scoring and Decision Rules) loan assessment. 
+  
+  Analyze the loan application data and provide a comprehensive risk assessment based on:
+  - Credit history and payment behavior
+  - Income stability and debt-to-income ratio  
+  - Employment history and job stability
+  - Collateral value and loan-to-value ratio
+  - Market conditions and economic factors
+  
+  Your response must include:
+  1. Overall risk score (0-100, where 0 is lowest risk)
+  2. Risk category (LOW, MEDIUM, HIGH, CRITICAL)
+  3. Recommendation (APPROVE, REVIEW, REJECT)
+  4. Detailed factor analysis with individual scores
+  5. Explanation for each factor's contribution
+  6. Key risk indicators and mitigation suggestions
+  
+  Current risk configuration weights:
+  - Credit History: ${configuration.weights.creditHistory}%
+  - Income Stability: ${configuration.weights.incomeStability}%
+  - Employment: ${configuration.weights.employment}%
+  - Collateral: ${configuration.weights.collateral}%
+  - Market Conditions: ${configuration.weights.marketConditions}%`;
+
+  // Define JSON response schema for structured risk assessment
   const responseSchema = {
     type: SchemaType.OBJECT,
     properties: {
-      title: {
+      riskScore: {
+        type: SchemaType.NUMBER,
+        description: "Overall risk score from 0-100 (0 = lowest risk)"
+      },
+      riskCategory: {
+        type: SchemaType.STRING,
+        description: "Risk category: LOW, MEDIUM, HIGH, or CRITICAL",
+        enum: ["LOW", "MEDIUM", "HIGH", "CRITICAL"]
+      },
+      recommendation: {
+        type: SchemaType.STRING,
+        description: "Loan recommendation: APPROVE, REVIEW, or REJECT",
+        enum: ["APPROVE", "REVIEW", "REJECT"]
+      },
+      confidence: {
+        type: SchemaType.NUMBER,
+        description: "Confidence level in assessment (0-100)"
+      },
+      factors: {
         type: SchemaType.OBJECT,
         properties: {
-          en: { type: SchemaType.STRING, description: "Event title in English." },
-          ar: { type: SchemaType.STRING, description: "Event title in Arabic." },
-          ku: { type: SchemaType.STRING, description: "Event title in Kurdish." },
+          creditHistory: {
+            type: SchemaType.OBJECT,
+            properties: {
+              score: { type: SchemaType.NUMBER, description: "Credit history score (0-100)" },
+              explanation: { type: SchemaType.STRING, description: "Explanation of credit history assessment" }
+            }
+          },
+          incomeStability: {
+            type: SchemaType.OBJECT,
+            properties: {
+              score: { type: SchemaType.NUMBER, description: "Income stability score (0-100)" },
+              explanation: { type: SchemaType.STRING, description: "Income stability analysis" }
+            }
+          },
+          employment: {
+            type: SchemaType.OBJECT,
+            properties: {
+              score: { type: SchemaType.NUMBER, description: "Employment stability score (0-100)" },
+              explanation: { type: SchemaType.STRING, description: "Employment analysis" }
+            }
+          },
+          collateral: {
+            type: SchemaType.OBJECT,
+            properties: {
+              score: { type: SchemaType.NUMBER, description: "Collateral value score (0-100)" },
+              explanation: { type: SchemaType.STRING, description: "Collateral assessment" }
+            }
+          },
+          marketConditions: {
+            type: SchemaType.OBJECT,
+            properties: {
+              score: { type: SchemaType.NUMBER, description: "Market conditions impact score (0-100)" },
+              explanation: { type: SchemaType.STRING, description: "Market conditions analysis" }
+            }
+          }
         },
-        required: ["en", "ar", "ku"]
+        required: ["creditHistory", "incomeStability", "employment", "collateral", "marketConditions"]
       },
-      description: {
+      keyRiskIndicators: {
+        type: SchemaType.ARRAY,
+        items: {
+          type: SchemaType.STRING
+        },
+        description: "List of key risk indicators identified"
+      },
+      mitigationSuggestions: {
+        type: SchemaType.ARRAY,
+        items: {
+          type: SchemaType.STRING
+        },
+        description: "Suggested risk mitigation measures"
+      },
+      summary: {
         type: SchemaType.OBJECT,
         properties: {
-          en: { type: SchemaType.STRING, description: "Event description in English (around 50 words)." },
-          ar: { type: SchemaType.STRING, description: "Event description in Arabic (around 50 words)." },
-          ku: { type: SchemaType.STRING, description: "Event description in Kurdish (around 50 words)." },
+          en: { type: SchemaType.STRING, description: "Executive summary in English" },
+          ar: { type: SchemaType.STRING, description: "Executive summary in Arabic" },
+          ku: { type: SchemaType.STRING, description: "Executive summary in Kurdish" }
         },
         required: ["en", "ar", "ku"]
-      },
-      suggestedCityId: {
-        type: SchemaType.STRING,
-        description: `The ID of the most relevant city from the available list.`,
-      },
-      suggestedCategoryId: {
-        type: SchemaType.STRING,
-        description: `The ID of the most relevant category from the available list.`,
-      },
-      imagePrompt: {
-        type: SchemaType.STRING,
-        description: `A creative, concise prompt (5-10 words) for an image generation model to create a visually appealing banner for this event.`,
       }
     },
-    required: ["title", "description", "suggestedCityId", "suggestedCategoryId", "imagePrompt"],
+    required: [
+      "riskScore", 
+      "riskCategory", 
+      "recommendation", 
+      "confidence", 
+      "factors", 
+      "keyRiskIndicators", 
+      "mitigationSuggestions",
+      "summary"
+    ]
   };
 
+  // Prepare application data for analysis (sanitized for AI processing)
+  const applicationSummary = `
+    Loan Amount: $${application.loanAmount}
+    Annual Income: $${application.applicant.annualIncome}
+    Credit Score: ${application.applicant.creditScore}
+    Employment: ${application.applicant.employmentType} (${application.applicant.yearsEmployed} years)
+    Debt-to-Income Ratio: ${application.applicant.debtToIncomeRatio}%
+    Loan Purpose: ${application.loanPurpose}
+    Collateral Value: $${application.collateralValue || 'N/A'}
+    Previous Defaults: ${application.applicant.previousDefaults || 0}
+  `;
+
   try {
-    // Generate text content using Gemini 1.5 Flash
+    // Generate risk assessment using Gemini 1.5 Flash
     const model = genAI.getGenerativeModel({ 
       model: "gemini-1.5-flash",
       systemInstruction,
       generationConfig: {
         responseMimeType: "application/json",
         responseSchema,
+        temperature: 0.1, // Low temperature for consistent financial analysis
+        maxOutputTokens: 4000
       },
     });
 
-    const textResponse = await model.generateContent(prompt);
-    const textResultJson = textResponse.response.text();
-    const textResult = JSON.parse(textResultJson);
-
-    // Validate that the returned IDs are valid
-    const finalCityId = cities.some(c => c.id === textResult.suggestedCityId) ? textResult.suggestedCityId : cities[0].id;
-    const finalCategoryId = categories.some(c => c.id === textResult.suggestedCategoryId) ? textResult.suggestedCategoryId : categories[0].id;
+    const assessmentResponse = await model.generateContent(applicationSummary);
+    const assessmentJson = assessmentResponse.response.text();
+    const assessment = JSON.parse(assessmentJson);
 
-    // For now, we'll use a placeholder image since Google Generative AI doesn't support image generation directly
-    // In a real app, you would use a separate image generation service
-    const imageBase64 = 'data:image/svg+xml;base64,' + btoa(`
-      <svg width="800" height="400" xmlns="http://www.w3.org/2000/svg">
-        <defs>
-          <linearGradient id="grad" x1="0%" y1="0%" x2="100%" y2="100%">
-            <stop offset="0%" style="stop-color:#00D2FF;stop-opacity:1" />
-            <stop offset="100%" style="stop-color:#3A47D5;stop-opacity:1" />
-          </linearGradient>
-        </defs>
-        <rect width="100%" height="100%" fill="url(#grad)"/>
-        <text x="50%" y="50%" text-anchor="middle" dy=".3em" fill="white" font-size="32" font-family="Arial, sans-serif">
-          ${textResult.title.en}
-        </text>
-      </svg>
-    `);
+    // Validate and normalize the assessment response
+    const validatedAssessment: RiskAssessment = {
+      id: `risk-${Date.now()}`,
+      applicationId: application.id,
+      timestamp: new Date().toISOString(),
+      configVersion: configuration.version,
+      riskScore: Math.max(0, Math.min(100, assessment.riskScore)),
+      riskCategory: assessment.riskCategory,
+      recommendation: assessment.recommendation,
+      confidence: Math.max(0, Math.min(100, assessment.confidence)),
+      factors: assessment.factors,
+      keyRiskIndicators: assessment.keyRiskIndicators,
+      mitigationSuggestions: assessment.mitigationSuggestions,
+      summary: assessment.summary,
+      explainability: {
+        methodology: "AI-powered multi-factor risk analysis using Gemini 1.5",
+        dataPoints: Object.keys(assessment.factors).length,
+        confidenceFactors: assessment.keyRiskIndicators,
+        limitations: ["AI assessment should be reviewed by human experts", "Market conditions may change"]
+      }
+    };
     
     return {
-      title: textResult.title as LocalizedString,
-      description: textResult.description as LocalizedString,
-      suggestedCityId: finalCityId,
-      suggestedCategoryId: finalCategoryId,
-      generatedImageBase64: imageBase64,
+      ...validatedAssessment
     };
   } catch (error) {
-    console.error("Error calling Gemini API:", error);
-    // Rethrow a more user-friendly error
-    throw new Error("Failed to generate AI suggestions. Please check your prompt or API key and try again.");
+    console.error("Error in risk assessment:", error);
+    throw new Error("Failed to generate risk assessment. Please verify application data and try again.");
   }
 };
 
-export const geminiService = {
-  getAISuggestions,
+export const riskAssessmentService = {
+  assessLoanRisk,
 };